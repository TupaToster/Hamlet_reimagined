<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="protos_8h" kind="file" language="C++">
    <compoundname>protos.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">sys\stat.h</includes>
    <includedby refid="bufferize_8cpp" local="yes">bufferize.cpp</includedby>
    <includedby refid="get__size_8cpp" local="yes">get_size.cpp</includedby>
    <includedby refid="initializers__and__destructors_8cpp" local="yes">initializers_and_destructors.cpp</includedby>
    <includedby refid="main_8cpp" local="yes">main.cpp</includedby>
    <includedby refid="read__text_8cpp" local="yes">read_text.cpp</includedby>
    <incdepgraph>
      <node id="5">
        <label>assert.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>sys\stat.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="1">
        <label>protos.h</label>
        <link refid="protos_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>bufferize.cpp</label>
        <link refid="bufferize_8cpp"/>
      </node>
      <node id="4">
        <label>initializers_and_destructors.cpp</label>
        <link refid="initializers__and__destructors_8cpp"/>
      </node>
      <node id="3">
        <label>get_size.cpp</label>
        <link refid="get__size_8cpp"/>
      </node>
      <node id="1">
        <label>protos.h</label>
        <link refid="protos_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>read_text.cpp</label>
        <link refid="read__text_8cpp"/>
      </node>
      <node id="5">
        <label>main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structline" prot="public">line</innerclass>
    <innerclass refid="structtext" prot="public">text</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="protos_8h_1a18b5ed1de200502d90a1d48be7842ca1" prot="public" static="no">
        <name>check</name>
        <param><defname>cond</defname></param>
        <param><defname>retVal</defname></param>
        <param><defname>errType</defname></param>
        <initializer>if (cond) {                          \
                                     \
    <ref refid="main_8cpp_1a6dab97701c064b3a7184b2fc5160ceea" kindref="member">errCode</ref> = errType;               \
    return retVal;                   \
}</initializer>
        <briefdescription>
<para>Checks for condition and if true returns retVal and writes errType to errCode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>condition to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retVal</parametername>
</parameternamelist>
<parameterdescription>
<para>value to return </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errType</parametername>
</parameternamelist>
<parameterdescription>
<para>error type to save </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="protos.h" line="18" column="9" bodyfile="protos.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056" prot="public" static="no" strong="no">
        <type></type>
        <name>errorCode</name>
        <enumvalue id="protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056a2bc49ec37d6a5715dd23e85f1ff5bb59" prot="public">
          <name>OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>everything ok </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for error codes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="protos.h" line="7" column="1" bodyfile="protos.h" bodystart="7" bodyend="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="protos_8h_1a3cc9f6add828df4782ed77208dd37977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initText</definition>
        <argsstring>(text *target)</argsstring>
        <name>initText</name>
        <param>
          <type><ref refid="structtext" kindref="compound">text</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Initializes a text type var. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>text* to var to init </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="protos.h" line="41" column="6" bodyfile="initializers_and_destructors.cpp" bodystart="29" bodyend="35" declfile="protos.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="protos_8h_1ab48cdaf07893d47c1ec98368a022dfd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initLine</definition>
        <argsstring>(line *target)</argsstring>
        <name>initLine</name>
        <param>
          <type><ref refid="structline" kindref="compound">line</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Initializes a line type var. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>line* to var to init </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="protos.h" line="43" column="6" bodyfile="initializers_and_destructors.cpp" bodystart="8" bodyend="12" declfile="protos.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="protos_8h_1a5cd4fdc44f5aab88c2b2f6072dd05ae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void killText</definition>
        <argsstring>(text *target)</argsstring>
        <name>killText</name>
        <param>
          <type><ref refid="structtext" kindref="compound">text</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Deinitializes a text type var. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>text* to var to kill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="protos.h" line="45" column="6" bodyfile="initializers_and_destructors.cpp" bodystart="41" bodyend="48" declfile="protos.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="protos_8h_1a89e5f11c20a0fe41e1fcee4c8fe3bcfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void killLine</definition>
        <argsstring>(line *target)</argsstring>
        <name>killLine</name>
        <param>
          <type><ref refid="structline" kindref="compound">line</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Deinitializes a line type var. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>line* to var to kill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="protos.h" line="47" column="6" bodyfile="initializers_and_destructors.cpp" bodystart="18" bodyend="22" declfile="protos.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="protos_8h_1ac87fbefe4ae9195d7ba3a7a38eed3fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t get_size</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>get_size</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Returns size of file in chars. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of file to measure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sizeof file in chars </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="protos.h" line="49" column="8" bodyfile="get_size.cpp" bodystart="8" bodyend="15" declfile="protos.h" declline="49" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="protos_8h_1a4533ca72f4105b135bffc875e44df8b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* bufferize</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>bufferize</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Bufferizes file input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of file to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ptr to c-string with whole text of file </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="protos.h" line="51" column="6" bodyfile="bufferize.cpp" bodystart="8" bodyend="22" declfile="protos.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="protos_8h_1ab285374b18fe616378d88faa5eccf546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtext" kindref="compound">text</ref></type>
        <definition>text read_text</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>read_text</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>\brief Fills text type var with input from file
\param filename name of file to fill from
\return text struct full of stuff
</verbatim> Fills text struct with: textString - whole text of a file lines - array of lines of file of type [begin, end) stringCnt - amount of strings in file textSize - sizeof text (by get_size) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="protos.h" line="53" column="6" bodyfile="read_text.cpp" bodystart="16" bodyend="49" declfile="protos.h" declline="53" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys\stat.h&gt;</highlight></codeline>
<codeline lineno="7" refid="protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056" kindref="member">errorCode</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056a2bc49ec37d6a5715dd23e85f1ff5bb59" kindref="member">OK</ref><sp/>=<sp/>0<sp/></highlight></codeline>
<codeline lineno="9" refid="protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056a2bc49ec37d6a5715dd23e85f1ff5bb59" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="protos_8h_1a18b5ed1de200502d90a1d48be7842ca1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>check(cond,<sp/>retVal,<sp/>errType)<sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor">if<sp/>(cond)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>errCode<sp/>=<sp/>errType;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>retVal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="structline" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structline" kindref="compound">line</ref><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structline_1a8aa4258c0f442b3c207ffe270aca4da6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structline_1a8aa4258c0f442b3c207ffe270aca4da6" kindref="member">begin</ref><sp/>=<sp/>NULL;<sp/></highlight></codeline>
<codeline lineno="29" refid="structline_1a5fa2b658adce1c935eee1f54b3d36e68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structline_1a5fa2b658adce1c935eee1f54b3d36e68" kindref="member">end</ref><sp/><sp/><sp/>=<sp/>NULL;<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal">};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structtext" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtext" kindref="compound">text</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="structtext_1acedd0976707f133eb8e729d778da7d37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structtext_1acedd0976707f133eb8e729d778da7d37" kindref="member">textString</ref><sp/>=<sp/>NULL;<sp/></highlight></codeline>
<codeline lineno="36" refid="structtext_1a859639b4d548fb8e77b46962b44d6528" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structtext_1a859639b4d548fb8e77b46962b44d6528" kindref="member">textSize</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37" refid="structtext_1a826ba5613feb94342be61f8cce1c6771" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structline" kindref="compound">line</ref>*<sp/><ref refid="structtext_1a826ba5613feb94342be61f8cce1c6771" kindref="member">lines</ref><sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38" refid="structtext_1ac9b610f2d15da2a601e4dc20d252270a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structtext_1ac9b610f2d15da2a601e4dc20d252270a" kindref="member">stringCnt</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="protos_8h_1a3cc9f6add828df4782ed77208dd37977" kindref="member">initText</ref><sp/>(<ref refid="structtext" kindref="compound">text</ref>*<sp/>target);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="protos_8h_1ab48cdaf07893d47c1ec98368a022dfd8" kindref="member">initLine</ref><sp/>(<ref refid="structline" kindref="compound">line</ref>*<sp/>target);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="protos_8h_1a5cd4fdc44f5aab88c2b2f6072dd05ae9" kindref="member">killText</ref><sp/>(<ref refid="structtext" kindref="compound">text</ref>*<sp/>target);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="protos_8h_1a89e5f11c20a0fe41e1fcee4c8fe3bcfd" kindref="member">killLine</ref><sp/>(<ref refid="structline" kindref="compound">line</ref>*<sp/>target);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="protos_8h_1ac87fbefe4ae9195d7ba3a7a38eed3fdb" kindref="member">get_size</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="protos_8h_1a4533ca72f4105b135bffc875e44df8b1" kindref="member">bufferize</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="structtext" kindref="compound">text</ref><sp/><ref refid="protos_8h_1ab285374b18fe616378d88faa5eccf546" kindref="member">read_text</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename);</highlight></codeline>
    </programlisting>
    <location file="protos.h"/>
  </compounddef>
</doxygen>
