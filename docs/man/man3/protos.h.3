.TH "protos.h" 3 "Sat Sep 17 2022" "Version 2.28" "Hamlet_reimagined" \" -*- nroff -*-
.ad l
.nh
.SH NAME
protos.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br
\fC#include <sys\\stat\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBline\fP"
.br
.RI "Struct to store lines of text in format [begin, end) "
.ti -1c
.RI "struct \fBtext\fP"
.br
.RI "Stores text in format of string and array of line structures\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBcheck\fP(cond,  retVal,  errType)"
.br
.RI "Checks for condition and if true returns retVal and writes errType to errCode\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBerrorCode\fP { \fBOK\fP = 0, \fBBAD_ALLOC\fP = -1, \fBFOPEN_ERROR\fP = -2, \fBINPUT_ERROR\fP = -3 }"
.br
.RI "Enum for error codes\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBinitText\fP (\fBtext\fP *target)"
.br
.RI "Initializes a text type var\&. "
.ti -1c
.RI "void \fBinitLine\fP (\fBline\fP *target)"
.br
.RI "Initializes a line type var\&. "
.ti -1c
.RI "void \fBkillText\fP (\fBtext\fP *target)"
.br
.RI "Deinitializes a text type var\&. "
.ti -1c
.RI "void \fBkillLine\fP (\fBline\fP *target)"
.br
.RI "Deinitializes a line type var\&. "
.ti -1c
.RI "size_t \fBget_size\fP (const char *filename)"
.br
.RI "Returns size of file in chars\&. "
.ti -1c
.RI "char * \fBbufferize\fP (const char *filename)"
.br
.RI "Bufferizes file input\&. "
.ti -1c
.RI "\fBtext\fP \fBread_text\fP (const char *filename)"
.br
.RI "Fills text type var with input from file\&. "
.ti -1c
.RI "bool \fBisAlphaNum\fP (const char c)"
.br
.RI "checks for c being a letter or number "
.ti -1c
.RI "int \fBlineCmp\fP (const void *fst, const void *scd)"
.br
.RI "Stright comp function\&. "
.ti -1c
.RI "int \fBlineCmpArab\fP (const void *fst, const void *scd)"
.br
.RI "compares strings left to right "
.ti -1c
.RI "int \fBcmpCore\fP (\fBline\fP line1, \fBline\fP line2, int delta)"
.br
.RI "Core of comparison of 2 strings with direction of ptr movement\&. "
.ti -1c
.RI "void \fBfputLine\fP (\fBline\fP src, FILE *outfile)"
.br
.ti -1c
.RI "void \fBpuzirek\fP (void *, size_t, size_t, int(*)(const void *, const void *))"
.br
.RI "Sorts\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBerrorCode\fP \fBerrCode\fP"
.br
.RI "Var to store error codes from functions\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define check(cond, retVal, errType)"
\fBValue:\fP
.PP
.nf
if (cond) {                          \
                                     \
    errCode = errType;               \
    return retVal;                   \
}
.fi
.PP
Checks for condition and if true returns retVal and writes errType to errCode\&. 
.PP
\fBParameters\fP
.RS 4
\fIcond\fP condition to check 
.br
\fIretVal\fP value to return 
.br
\fIerrType\fP error type to save 
.RE
.PP

.PP
Definition at line 22 of file protos\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBerrorCode\fP"

.PP
Enum for error codes\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIOK \fP\fP
everything ok 
.TP
\fB\fIBAD_ALLOC \fP\fP
Allocation failed\&. 
.TP
\fB\fIFOPEN_ERROR \fP\fP
Error opening file\&. 
.TP
\fB\fIINPUT_ERROR \fP\fP
Error in input function\&. 
.PP
Definition at line 7 of file protos\&.h\&.
.SH "Function Documentation"
.PP 
.SS "char* bufferize (const char * filename)"

.PP
Bufferizes file input\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP name of file to read from 
.RE
.PP
\fBReturns\fP
.RS 4
ptr to c-string with whole text of file 
.RE
.PP

.PP
Definition at line 8 of file bufferize\&.cpp\&.
.SS "int cmpCore (\fBline\fP line1, \fBline\fP line2, int delta)"

.PP
Core of comparison of 2 strings with direction of ptr movement\&. 
.PP
\fBParameters\fP
.RS 4
\fIline1\fP first line to compare 
.br
\fIline2\fP second line to compare 
.br
\fIdelta\fP direction and speed of ptr movement 
.RE
.PP
\fBReturns\fP
.RS 4
-1 if line1 < line2 
.PP
0 if line1 == line2 
.PP
1 if line1 > line2 
.RE
.PP

.PP
Definition at line 64 of file comps\&.cpp\&.
.SS "void fputLine (\fBline\fP src, FILE * outfile)"

.PP
Definition at line 3 of file fputLine\&.cpp\&.
.SS "size_t get_size (const char * filename)"

.PP
Returns size of file in chars\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP name of file to measure 
.RE
.PP
\fBReturns\fP
.RS 4
sizeof file in chars 
.RE
.PP

.PP
Definition at line 10 of file get_size\&.cpp\&.
.SS "void initLine (\fBline\fP * target)"

.PP
Initializes a line type var\&. 
.PP
\fBParameters\fP
.RS 4
\fItarget\fP line* to var to init 
.RE
.PP

.PP
Definition at line 8 of file initializers_and_destructors\&.cpp\&.
.SS "void initText (\fBtext\fP * target)"

.PP
Initializes a text type var\&. 
.PP
\fBParameters\fP
.RS 4
\fItarget\fP text* to var to init 
.RE
.PP

.PP
Definition at line 29 of file initializers_and_destructors\&.cpp\&.
.SS "bool isAlphaNum (const char c)"

.PP
checks for c being a letter or number 
.PP
\fBParameters\fP
.RS 4
\fIc\fP char to check 
.RE
.PP
\fBReturns\fP
.RS 4
true if is cool 
.PP
false if not cool 
.RE
.PP

.PP
Definition at line 8 of file comps\&.cpp\&.
.SS "void killLine (\fBline\fP * target)"

.PP
Deinitializes a line type var\&. 
.PP
\fBParameters\fP
.RS 4
\fItarget\fP line* to var to kill 
.RE
.PP

.PP
Definition at line 18 of file initializers_and_destructors\&.cpp\&.
.SS "void killText (\fBtext\fP * target)"

.PP
Deinitializes a text type var\&. 
.PP
\fBParameters\fP
.RS 4
\fItarget\fP text* to var to kill 
.RE
.PP

.PP
Definition at line 41 of file initializers_and_destructors\&.cpp\&.
.SS "int lineCmp (const void * fst, const void * scd)"

.PP
Stright comp function\&. 
.PP
\fBParameters\fP
.RS 4
\fIfst\fP first line to compare 
.br
\fIscd\fP scd line to compare 
.RE
.PP
\fBReturns\fP
.RS 4
-1 if fst < scd 
.PP
0 if fst == scd 
.PP
1 if fst > scd 
.RE
.PP

.PP
Definition at line 22 of file comps\&.cpp\&.
.SS "int lineCmpArab (const void * fst, const void * scd)"

.PP
compares strings left to right 
.PP
\fBParameters\fP
.RS 4
\fIfst\fP first line to compare 
.br
\fIscd\fP second line to compare 
.RE
.PP
\fBReturns\fP
.RS 4
-1 if fst < scd 
.PP
0 if fst == scd 
.PP
1 if fst > scd 
.RE
.PP

.PP
Definition at line 33 of file comps\&.cpp\&.
.SS "void puzirek (void * begin, size_t len, size_t elemSize, int(*)(const void *, const void *) comp)"

.PP
Sorts\&. 
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP void* to start of array 
.br
\fIlen\fP length in elements 
.br
\fIelemSize\fP length of one elem in bytes 
.br
\fIcomp\fP func to compare em all 
.RE
.PP

.PP
Definition at line 11 of file my_sort\&.cpp\&.
.SS "\fBtext\fP read_text (const char * filename)"

.PP
Fills text type var with input from file\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP name of file to fill from 
.RE
.PP
\fBReturns\fP
.RS 4
text struct full of stuff
.RE
.PP
Fills text struct with: textString - whole text of a file lines - array of lines of file of type [begin, end) stringCnt - amount of strings in file textSize - sizeof text (by get_size) 
.PP
Definition at line 14 of file read_text\&.cpp\&.
.SH "Variable Documentation"
.PP 
.SS "\fBerrorCode\fP errCode\fC [extern]\fP"

.PP
Var to store error codes from functions\&. 
.PP
Definition at line 1 of file main\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Hamlet_reimagined from the source code\&.
