<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_protos_8h" xml:lang="en-US">
<title>protos.h File Reference</title>
<indexterm><primary>protos.h</primary></indexterm>
<programlisting>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;
#include &lt;sys\stat.h&gt;
#include &lt;ctype.h&gt;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structline">line</link></para>

<para>Struct to store lines of text in format [begin, end) </para>
</listitem>
            <listitem><para>struct <link linkend="_structtext">text</link></para>

<para>Stores text in format of string and array of line structures. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_protos_8h_1a870111f6c1e1a44c54f91a843c24f298">MY_SORT</link></para>
</listitem>
            <listitem><para>#define <link linkend="_protos_8h_1a822bae94dea1a65ba1f762abd0a50009">CHECK</link>(cond,  retVal,  errType)</para>

<para>Checks for condition and if true returns retVal and writes errType to errCode. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056">errorCode</link> { <link linkend="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056a2bc49ec37d6a5715dd23e85f1ff5bb59">OK</link> = 0
, <link linkend="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056a660150ee9830d9dde6c013a814618984">BAD_ALLOC</link> = -1
, <link linkend="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056ab7cad684cbb7c5b778a093a01fd8eaaa">FOPEN_ERROR</link> = -2
, <link linkend="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056aec1024879d398de584d1722ebbe0a5c9">INPUT_ERROR</link> = -3
 }</para>

<para>Enum for error codes. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_protos_8h_1a3cc9f6add828df4782ed77208dd37977">initText</link> (<link linkend="_structtext">text</link> *target)</para>

<para>Initializes a text type var. </para>
</listitem>
            <listitem><para>void <link linkend="_protos_8h_1ab48cdaf07893d47c1ec98368a022dfd8">initLine</link> (<link linkend="_structline">line</link> *target)</para>

<para>Initializes a line type var. </para>
</listitem>
            <listitem><para>void <link linkend="_protos_8h_1a5cd4fdc44f5aab88c2b2f6072dd05ae9">killText</link> (<link linkend="_structtext">text</link> *target)</para>

<para>Deinitializes a text type var. </para>
</listitem>
            <listitem><para>void <link linkend="_protos_8h_1a89e5f11c20a0fe41e1fcee4c8fe3bcfd">killLine</link> (<link linkend="_structline">line</link> *target)</para>

<para>Deinitializes a line type var. </para>
</listitem>
            <listitem><para>size_t <link linkend="_protos_8h_1ac87fbefe4ae9195d7ba3a7a38eed3fdb">get_size</link> (const char *filename)</para>

<para>Returns size of file in chars. </para>
</listitem>
            <listitem><para>void <link linkend="_protos_8h_1aadbba6ad94d0f635fa6d84d3cd2476df">bufferize</link> (const char *filename, <link linkend="_structtext">text</link> *writeTo)</para>

<para>Buffirezes file. </para>
</listitem>
            <listitem><para><link linkend="_structtext">text</link> <link linkend="_protos_8h_1ab285374b18fe616378d88faa5eccf546">read_text</link> (const char *filename)</para>

<para>Fills text type var with input from file. </para>
</listitem>
            <listitem><para>bool <link linkend="_protos_8h_1aea547ef49920c0686a41a0144bed2854">isAlphaNum</link> (const char c)</para>

<para>checks for c being a letter or number </para>
</listitem>
            <listitem><para>int <link linkend="_protos_8h_1a4f2ba23eb402c4479ab5d36e0c39c80b">lineCmp</link> (const void *fst, const void *scd)</para>

<para>Stright comp function. </para>
</listitem>
            <listitem><para>int <link linkend="_protos_8h_1ae4bf5b1ee57024f7acd7cb71a92d5f9b">lineCmpArab</link> (const void *fst, const void *scd)</para>

<para>compares strings left to right </para>
</listitem>
            <listitem><para>int <link linkend="_protos_8h_1a84391bbe7626605eb3ed51f42542a0e6">cmpCore</link> (<link linkend="_structline">line</link> line1, <link linkend="_structline">line</link> line2, int delta)</para>

<para>Core of comparison of 2 strings with direction of ptr movement. </para>
</listitem>
            <listitem><para>void <link linkend="_protos_8h_1af7064d4ad3486b2eeeee94807091bad1">fputLine</link> (<link linkend="_structline">line</link> src, FILE *outfile)</para>
</listitem>
            <listitem><para>void <link linkend="_protos_8h_1a05fa557fce910daa1163100098899ae7">puzirek</link> (void *, size_t, size_t, int(*)(const void *, const void *))</para>

<para>Sorts. </para>
</listitem>
            <listitem><para>void <link linkend="_protos_8h_1a9dd48802fd9840fde4045e0211c3da09">handleComLine</link> (int argc, char *argv[], char **inName, char **sortedOut, char **arabsortedOut, char **defaultOut)</para>

<para>Handle variable command line arguments. </para>
</listitem>
            <listitem><para>void <link linkend="_protos_8h_1acd39f2a4b70e5e584c860d16c687c3ac">cntLines</link> (<link linkend="_structtext">text</link> *writeTo)</para>

<para>counts amount of lines in a text </para>
</listitem>
            <listitem><para>void <link linkend="_protos_8h_1a659b485ec26275b09ca1299b4a9cecc8">separateLines</link> (<link linkend="_structtext">text</link> *writeTo)</para>

<para>separates lines in a text </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><link linkend="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056">errorCode</link> <link linkend="_protos_8h_1a31ca5aca24614aec217357a437432d87">errCode</link></para>

<para>Var to store error codes from functions. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_protos_8h_1a822bae94dea1a65ba1f762abd0a50009"/>    <section>
    <title>CHECK</title>
<indexterm><primary>CHECK</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>CHECK</secondary></indexterm>
<para><computeroutput>#define CHECK( cond,  retVal,  errType)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting><emphasis role="keywordflow">if</emphasis>&#32;(cond)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;errCode&#32;=&#32;errType;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;return&#32;retVal;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
}
</programlisting><para>

<para>Checks for condition and if true returns retVal and writes errType to errCode. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>cond</entry>
                                <entry>
<para>condition to check </para>
</entry>
                            </row>
                            <row>
                                <entry>retVal</entry>
                                <entry>
<para>value to return </para>
</entry>
                            </row>
                            <row>
                                <entry>errType</entry>
                                <entry>
<para>error type to save </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 25 of file protos.h.</para>
    </section><anchor xml:id="_protos_8h_1a870111f6c1e1a44c54f91a843c24f298"/>    <section>
    <title>MY_SORT</title>
<indexterm><primary>MY_SORT</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>MY_SORT</secondary></indexterm>
<para><computeroutput>#define MY_SORT</computeroutput></para><para>
Definition at line 7 of file protos.h.</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056"/>    <section>
    <title>errorCode</title>
<indexterm><primary>errorCode</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>errorCode</secondary></indexterm>
<para><computeroutput>enum <link linkend="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056">errorCode</link></computeroutput></para><para>

<para>Enum for error codes. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>OK</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>OK</secondary></indexterm>
<anchor xml:id="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056a2bc49ec37d6a5715dd23e85f1ff5bb59"/>OK</entry><entry>
<para>everything ok </para>
</entry></row><row><entry><indexterm><primary>BAD_ALLOC</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>BAD_ALLOC</secondary></indexterm>
<anchor xml:id="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056a660150ee9830d9dde6c013a814618984"/>BAD_ALLOC</entry><entry>
<para>Allocation failed. </para>
</entry></row><row><entry><indexterm><primary>FOPEN_ERROR</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>FOPEN_ERROR</secondary></indexterm>
<anchor xml:id="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056ab7cad684cbb7c5b778a093a01fd8eaaa"/>FOPEN_ERROR</entry><entry>
<para>Error opening file. </para>
</entry></row><row><entry><indexterm><primary>INPUT_ERROR</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>INPUT_ERROR</secondary></indexterm>
<anchor xml:id="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056aec1024879d398de584d1722ebbe0a5c9"/>INPUT_ERROR</entry><entry>
<para>Error in input function. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 10 of file protos.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_protos_8h_1aadbba6ad94d0f635fa6d84d3cd2476df"/>    <section>
    <title>bufferize()</title>
<indexterm><primary>bufferize</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>bufferize</secondary></indexterm>
<para><computeroutput>void bufferize (const char * filename, <link linkend="_structtext">text</link> * writeTo)</computeroutput></para><para>

<para>Buffirezes file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>filename</entry>
                                <entry>
<para>name of file to bufferize </para>
</entry>
                            </row>
                            <row>
                                <entry>writeTo</entry>
                                <entry>
<para>ptr to struct text to write buffer and buffer length to </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 6 of file bufferize.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a84391bbe7626605eb3ed51f42542a0e6"/>    <section>
    <title>cmpCore()</title>
<indexterm><primary>cmpCore</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>cmpCore</secondary></indexterm>
<para><computeroutput>int cmpCore (<link linkend="_structline">line</link> line1, <link linkend="_structline">line</link> line2, int delta)</computeroutput></para><para>

<para>Core of comparison of 2 strings with direction of ptr movement. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>line1</entry>
                                <entry>
<para>first line to compare </para>
</entry>
                            </row>
                            <row>
                                <entry>line2</entry>
                                <entry>
<para>second line to compare </para>
</entry>
                            </row>
                            <row>
                                <entry>delta</entry>
                                <entry>
<para>direction and speed of ptr movement </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>-1 if line1 &lt; line2 </para>

<para>0 if line1 == line2 </para>

<para>1 if line1 &gt; line2 </para>
</formalpara>
</para>
<para>
Definition at line 64 of file comps.cpp.</para>
    </section><anchor xml:id="_protos_8h_1acd39f2a4b70e5e584c860d16c687c3ac"/>    <section>
    <title>cntLines()</title>
<indexterm><primary>cntLines</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>cntLines</secondary></indexterm>
<para><computeroutput>void cntLines (<link linkend="_structtext">text</link> * src)</computeroutput></para><para>

<para>counts amount of lines in a text </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>src</entry>
                                <entry>
<para>text* to wite to and read from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 5 of file cntLines.cpp.</para>
    </section><anchor xml:id="_protos_8h_1af7064d4ad3486b2eeeee94807091bad1"/>    <section>
    <title>fputLine()</title>
<indexterm><primary>fputLine</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>fputLine</secondary></indexterm>
<para><computeroutput>void fputLine (<link linkend="_structline">line</link> src, FILE * outfile)</computeroutput></para><para>
Definition at line 3 of file fputLine.cpp.</para>
    </section><anchor xml:id="_protos_8h_1ac87fbefe4ae9195d7ba3a7a38eed3fdb"/>    <section>
    <title>get_size()</title>
<indexterm><primary>get_size</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>get_size</secondary></indexterm>
<para><computeroutput>size_t get_size (const char * filename)</computeroutput></para><para>

<para>Returns size of file in chars. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>filename</entry>
                                <entry>
<para>name of file to measure </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>sizeof file in chars </para>
</formalpara>
</para>
<para>
Definition at line 10 of file get_size.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a9dd48802fd9840fde4045e0211c3da09"/>    <section>
    <title>handleComLine()</title>
<indexterm><primary>handleComLine</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>handleComLine</secondary></indexterm>
<para><computeroutput>void handleComLine (int argc, char * argv[], char ** inName, char ** sortedOut, char ** arabsortedOut, char ** defaultOut)</computeroutput></para><para>

<para>Handle variable command line arguments. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>argc</entry>
                                <entry>
<para>argument count </para>
</entry>
                            </row>
                            <row>
                                <entry>argv</entry>
                                <entry>
<para>array of args </para>
</entry>
                            </row>
                            <row>
                                <entry>inName</entry>
                                <entry>
<para>name of input file </para>
</entry>
                            </row>
                            <row>
                                <entry>sortedOut</entry>
                                <entry>
<para>name of output straight sort file </para>
</entry>
                            </row>
                            <row>
                                <entry>arabsortedOut</entry>
                                <entry>
<para>name of arabsorted file </para>
</entry>
                            </row>
                            <row>
                                <entry>defaultOut</entry>
                                <entry>
<para>name of default output file </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 27 of file handleComLine.cpp.</para>
    </section><anchor xml:id="_protos_8h_1ab48cdaf07893d47c1ec98368a022dfd8"/>    <section>
    <title>initLine()</title>
<indexterm><primary>initLine</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>initLine</secondary></indexterm>
<para><computeroutput>void initLine (<link linkend="_structline">line</link> * target)</computeroutput></para><para>

<para>Initializes a line type var. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>target</entry>
                                <entry>
<para>line* to var to init </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 8 of file initializers_and_destructors.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a3cc9f6add828df4782ed77208dd37977"/>    <section>
    <title>initText()</title>
<indexterm><primary>initText</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>initText</secondary></indexterm>
<para><computeroutput>void initText (<link linkend="_structtext">text</link> * target)</computeroutput></para><para>

<para>Initializes a text type var. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>target</entry>
                                <entry>
<para>text* to var to init </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 29 of file initializers_and_destructors.cpp.</para>
    </section><anchor xml:id="_protos_8h_1aea547ef49920c0686a41a0144bed2854"/>    <section>
    <title>isAlphaNum()</title>
<indexterm><primary>isAlphaNum</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>isAlphaNum</secondary></indexterm>
<para><computeroutput>bool isAlphaNum (const char c)</computeroutput></para><para>

<para>checks for c being a letter or number </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>c</entry>
                                <entry>
<para>char to check </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if is cool </para>

<para>false if not cool </para>
</formalpara>
</para>
<para>
Definition at line 8 of file comps.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a89e5f11c20a0fe41e1fcee4c8fe3bcfd"/>    <section>
    <title>killLine()</title>
<indexterm><primary>killLine</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>killLine</secondary></indexterm>
<para><computeroutput>void killLine (<link linkend="_structline">line</link> * target)</computeroutput></para><para>

<para>Deinitializes a line type var. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>target</entry>
                                <entry>
<para>line* to var to kill </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 18 of file initializers_and_destructors.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a5cd4fdc44f5aab88c2b2f6072dd05ae9"/>    <section>
    <title>killText()</title>
<indexterm><primary>killText</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>killText</secondary></indexterm>
<para><computeroutput>void killText (<link linkend="_structtext">text</link> * target)</computeroutput></para><para>

<para>Deinitializes a text type var. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>target</entry>
                                <entry>
<para>text* to var to kill </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 41 of file initializers_and_destructors.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a4f2ba23eb402c4479ab5d36e0c39c80b"/>    <section>
    <title>lineCmp()</title>
<indexterm><primary>lineCmp</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>lineCmp</secondary></indexterm>
<para><computeroutput>int lineCmp (const void * fst, const void * scd)</computeroutput></para><para>

<para>Stright comp function. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>fst</entry>
                                <entry>
<para>first line to compare </para>
</entry>
                            </row>
                            <row>
                                <entry>scd</entry>
                                <entry>
<para>scd line to compare </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>-1 if fst &lt; scd </para>

<para>0 if fst == scd </para>

<para>1 if fst &gt; scd </para>
</formalpara>
</para>
<para>
Definition at line 22 of file comps.cpp.</para>
    </section><anchor xml:id="_protos_8h_1ae4bf5b1ee57024f7acd7cb71a92d5f9b"/>    <section>
    <title>lineCmpArab()</title>
<indexterm><primary>lineCmpArab</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>lineCmpArab</secondary></indexterm>
<para><computeroutput>int lineCmpArab (const void * fst, const void * scd)</computeroutput></para><para>

<para>compares strings left to right </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>fst</entry>
                                <entry>
<para>first line to compare </para>
</entry>
                            </row>
                            <row>
                                <entry>scd</entry>
                                <entry>
<para>second line to compare </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>-1 if fst &lt; scd </para>

<para>0 if fst == scd </para>

<para>1 if fst &gt; scd </para>
</formalpara>
</para>
<para>
Definition at line 33 of file comps.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a05fa557fce910daa1163100098899ae7"/>    <section>
    <title>puzirek()</title>
<indexterm><primary>puzirek</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>puzirek</secondary></indexterm>
<para><computeroutput>void puzirek (void * begin, size_t len, size_t elemSize, int(*)(const void *, const void *) comp)</computeroutput></para><para>

<para>Sorts. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>begin</entry>
                                <entry>
<para>void* to start of array </para>
</entry>
                            </row>
                            <row>
                                <entry>len</entry>
                                <entry>
<para>length in elements </para>
</entry>
                            </row>
                            <row>
                                <entry>elemSize</entry>
                                <entry>
<para>length of one elem in bytes </para>
</entry>
                            </row>
                            <row>
                                <entry>comp</entry>
                                <entry>
<para>func to compare em all </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 13 of file my_sort.cpp.</para>
    </section><anchor xml:id="_protos_8h_1ab285374b18fe616378d88faa5eccf546"/>    <section>
    <title>read_text()</title>
<indexterm><primary>read_text</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>read_text</secondary></indexterm>
<para><computeroutput><link linkend="_structtext">text</link> read_text (const char * filename)</computeroutput></para><para>

<para>Fills text type var with input from file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>filename</entry>
                                <entry>
<para>name of file to fill from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>text struct full of stuff</para>
</formalpara>
Fills text struct with: textString - whole text of a file lines - array of lines of file of type [begin, end) stringCnt - amount of strings in file textSize - sizeof text (by get_size) </para>
<para>
Definition at line 14 of file read_text.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a659b485ec26275b09ca1299b4a9cecc8"/>    <section>
    <title>separateLines()</title>
<indexterm><primary>separateLines</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>separateLines</secondary></indexterm>
<para><computeroutput>void separateLines (<link linkend="_structtext">text</link> * writeTo)</computeroutput></para><para>

<para>separates lines in a text </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>writeTo</entry>
                                <entry>
<para>text* to write to and read from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 5 of file separateLines.cpp.</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_protos_8h_1a31ca5aca24614aec217357a437432d87"/>    <section>
    <title>errCode</title>
<indexterm><primary>errCode</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>errCode</secondary></indexterm>
<para><computeroutput><link linkend="_protos_8h_1ab19a8e0fe3ea0ea5c7259400cb389056">errorCode</link> errCode<computeroutput>[extern]</computeroutput></computeroutput></para><para>

<para>Var to store error codes from functions. </para>
</para>
<para>
Definition at line 1 of file main.cpp.</para>
</section>
</section>
</section>
